
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__policy_proxy_h__PROXY_MARSHAL_H
#define __dbusxx__policy_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace keti {
namespace bmc {

class policy_proxy
: public ::DBus::InterfaceProxy
{
public:

    policy_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.keti.bmc.policy")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< std::string, std::string, std::string, int32_t, std::string > getFanPolicy(const std::string& policyName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << policyName;
        call.member("getFanPolicy");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::string, std::string, std::string, int32_t, std::string > argout;
        ri >> argout;
        return argout;
    }

    int32_t setFanPolicyString(const std::string& policyName, const std::string& attribute, const std::string& attributeName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << policyName;
        wi << attribute;
        wi << attributeName;
        call.member("setFanPolicyString");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t setFanPolicyInt(const std::string& policyName, const std::string& attribute, const int32_t& attributeValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << policyName;
        wi << attribute;
        wi << attributeValue;
        call.member("setFanPolicyInt");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
#endif //__dbusxx__policy_proxy_h__PROXY_MARSHAL_H
